/* 템플릿 리터럴 */

var 문자 = "동재";

var 문자2 = `동재짱`;

var 문자3 = `동재짱동재짱동재짱동재짱
동재짱동재짱동재짱동재짱`;

/* 이런식으로 개행도 가능 */

var 문장 = `안녕하세요 저는 ` + 문자;
console.log("문장1:::" + 문장);
var 문장2 = `안녕하세요 저는 ${문자}`;
console.log("문장2:::" + 문장2);

/* 백틱의 장점 
1. 안에서 개행이 가능
2. 중간중간 변수 넣기 쉬움 */

/* 
백틱 + 함수
tagged literals  */

var 문장3 = `안녕하세요 저는 ${문자} 입니다.`;

function 해체분석기(문자들, 변수들, 변수들2) {
  console.log("텍스트:::", 문자들);
  console.log("변수들:::", 변수들);
  console.log("변수들2:::", 변수들2);
  console.log("순서 바꾸기:::", 문자들[1] + 변수들 + 문자들[0]);
}

해체분석기`안녕하세요 저는 ${문자} 입니다. ${문자2}`;

/* tagged literals 문법은
`문자`를 해체분석할 수 있음 */

/* 
-단어 순서를 변경하거나
-단어를 제거하거나
-${변수} 위치를 옮기거나 
*/

/* 여기서 `문자들` 첫번째 파라미터는 백틱 안의 문자들을 array 안에 넣어서 배열로 만들어주고 보관*/
/* 여기서 `변수들` 두번째 파라미터는 변수를 뜻함
변수가 여러개일 때는 변수들2 이런식으로 간다 */

/* 글자에 순서를 변경하는 법 */
/* console.log("순서 바꾸기:::", 문자들[1] + 변수들 + 문자들[0]); */

/* 문제01 */
var pants = 20;
var socks = 100;
var 문제1 = `바지${pants} 양말${socks}`;

console.log("문제1 풀이전:::", 문제1);
/* 양말20 바지100 바꾸기 */

function 글자교체기(문자들, 변수1, 변수2) {
  console.log("문제1 풀이후:::", 문자들[1] + 변수1 + 문자들[0] + 변수2);
}
글자교체기`바지${pants} 양말${socks}`;

/* 문제02 */
var pants2 = 0;
var socks2 = 100;
var 문제2 = `바지${pants2} 양말${socks2}`;

console.log("문제2 풀이전:::", 문제2);
/* pants2라는 변수가 0인 경우 */
/* `바지다팔렸어요 양말100` 이렇게 만들기*/
function 글자교체기2(문자들, 변수1, 변수2) {
  if (pants2 === 0) {
    변수1 = " 다팔렸어요";
  }

  console.log("문제2 풀이후:::", 문자들[0] + 변수1 + 문자들[1] + 변수2);
}

글자교체기2`바지${pants2} 양말${socks2}`;
